import os
import json
import requests
from flask import Flask, request, jsonify, send_from_directory
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import io
import zipfile
from docx import Document
import PyPDF2
import shutil

app = Flask(__name__, static_folder='.')

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
XAI_API_KEY = os.environ.get("XAI_API_KEY")
API_URL = "https://api.x.ai/v1/chat/completions"
MODEL = "grok-4-fast-reasoning"
MAX_TOKENS = 1900000
OUTPUT_TOKENS = 10000


# Google Drive API Key from environment
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")

# Default folder IDs (user can update these)
FOLDER_IDS = {
    "–î–µ–∫–ª–∞—Ä–∞—Ü–∏–∏": "1ZTDzwp_ywHn8bnpTybfCOG4MvcpblaXn",
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã": "1VnlhnmBWvMpIcBJPtdJwlnPku2-_XtTx",
    "FAQ": "1-NrMMZazEkw5N1JvLVo5UuVs62mx97gv",
}

folder_caches = {
    "–î–µ–∫–ª–∞—Ä–∞—Ü–∏–∏": {"doc_cache": "", "processed_files": 0, "file_name_map": {}, "file_id_map": {}, "data_dir": None},
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã": {"doc_cache": "", "processed_files": 0, "file_name_map": {}, "file_id_map": {}, "data_dir": None},
    "FAQ": {"doc_cache": "", "processed_files": 0, "file_name_map": {}, "file_id_map": {}, "data_dir": None},
}

BATCH_SIZE = 10
METADATA_FILE = "archive_metadata.json"

# ===================== –ü–û–î–î–ï–†–ñ–ò–í–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò =====================

def extract_text_from_pdf(file_path):
    try:
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            return "\n".join([p.extract_text() or '' for p in reader.pages])
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ PDF: {str(e)}"


def extract_text_from_docx(file_path):
    try:
        doc = Document(file_path)
        return "\n".join([p.text.strip() for p in doc.paragraphs if p.text.strip()])
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ DOCX: {str(e)}"


def has_files_in_dir(data_dir):
    for _, _, files in os.walk(data_dir):
        for fname in files:
            if fname.endswith(".pdf") or fname.endswith(".docx"):
                return True
    return False


def load_cache(folder_name):
    cache_file = f"cache_{folder_name}.json"
    if os.path.exists(cache_file):
        with open(cache_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return None


def save_cache(cache, folder_name):
    cache_file = f"cache_{folder_name}.json"
    with open(cache_file, "w", encoding="utf-8") as f:
        json.dump(cache, f, ensure_ascii=False, indent=2)


def delete_old_data(folder_name):
    cache_file = f"cache_{folder_name}.json"
    data_dir = os.path.join(os.getcwd(), f"data_{folder_name}")
    try:
        if os.path.exists(cache_file):
            os.remove(cache_file)
        if os.path.exists(data_dir):
            shutil.rmtree(data_dir, ignore_errors=True)
        folder_caches[folder_name] = {"doc_cache": "", "processed_files": 0,
                                      "file_name_map": {}, "file_id_map": {}, "data_dir": None}
        print(f"üßπ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –¥–ª—è {folder_name}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {folder_name}: {e}")


# ===================== GOOGLE DRIVE =====================
def download_google_drive_files(file_or_folder_id, folder_name):
    """–ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å Google Drive, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äî —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É."""
    cache = folder_caches[folder_name]
    cache["data_dir"] = os.path.join(os.getcwd(), f"data_{folder_name}")
    os.makedirs(cache["data_dir"], exist_ok=True)

    if not GOOGLE_API_KEY:
        print(f"‚ö†Ô∏è Google API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {folder_name}")
        if not has_files_in_dir(cache["data_dir"]):
            msg = (f"Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_API_KEY –≤ Secrets –∏–ª–∏ "
                   f"–ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã (.pdf –∏–ª–∏ .docx) –≤ –ø–∞–ø–∫—É '{cache['data_dir']}'.")
            print(msg)
            return False, msg
        else:
            print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è {folder_name}.")
            return True, "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã."

    try:
        service = build('drive', 'v3', developerKey=GOOGLE_API_KEY)
        file_metadata = service.files().get(fileId=file_or_folder_id, fields="mimeType,name").execute()
        mime_type = file_metadata.get("mimeType")
        file_name = file_metadata.get("name")

        if mime_type == "application/vnd.google-apps.folder":
            results = service.files().list(
                q=f"'{file_or_folder_id}' in parents and trashed=false",
                fields="files(id,name,mimeType)"
            ).execute()
            files = results.get("files", [])
            zip_files = [f for f in files if f["name"].lower().endswith(".zip")]
            if not zip_files:
                raise Exception("–ù–µ—Ç ZIP-—Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.")
            file = zip_files[0]
            file_id = file["id"]
        elif mime_type == "application/zip":
            file_id = file_or_folder_id
        else:
            raise Exception("ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∏–ª–∏ –ø–∞–ø–∫–æ–π.")

        request_obj = service.files().get_media(fileId=file_id)
        zip_path = os.path.join(cache["data_dir"], "archive.zip")
        with io.FileIO(zip_path, "w") as fh:
            downloader = MediaIoBaseDownload(fh, request_obj)
            done = False
            while not done:
                status, done = downloader.next_chunk()

        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(cache["data_dir"])
        os.remove(zip_path)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∞—Ä—Ö–∏–≤ –¥–ª—è {folder_name}")
        return True, "–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω."

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è {folder_name}: {e}")
        if not has_files_in_dir(cache["data_dir"]):
            msg = (f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {folder_name}. "
                   f"–°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ '{cache['data_dir']}'. "
                   f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ —Ñ–∞–π–ª—ã (.pdf –∏–ª–∏ .docx).")
            print(msg)
            return False, msg
        else:
            print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è {folder_name}.")
            return True, "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã."


def process_local_folder(folder_name):
    cache = folder_caches[folder_name]
    data_dir = cache["data_dir"]
    if not has_files_in_dir(data_dir):
        return False, f"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è {folder_name}."
    cache["doc_cache"] = ""

    for root, _, files in os.walk(data_dir):
        for f in files:
            path = os.path.join(root, f)
            if f.endswith(".pdf"):
                text = extract_text_from_pdf(path)
            elif f.endswith(".docx"):
                text = extract_text_from_docx(path)
            else:
                continue
            cache["doc_cache"] += "\n" + text
            cache["processed_files"] += 1

    save_cache(cache, folder_name)
    return True, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cache['processed_files']} —Ñ–∞–π–ª–æ–≤."


# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
@app.route('/api/initialize', methods=['POST'])
def initialize():
    for folder_name, folder_id in FOLDER_IDS.items():
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {folder_name}")
        cache_data = load_cache(folder_name)
        folder_path = os.path.join(os.getcwd(), f"data_{folder_name}")

        if cache_data and has_files_in_dir(folder_path):
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à –¥–ª—è {folder_name}")
            folder_caches[folder_name] = cache_data
            continue

        success, msg = download_google_drive_files(folder_id, folder_name)
        if not success:
            return jsonify({"error": msg}), 500

        success, msg = process_local_folder(folder_name)
        if not success:
            return jsonify({"error": msg}), 500

    return jsonify({"message": "–í—Å–µ –ø–∞–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã."}), 200


# ===================== –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô =====================
@app.route('/api/check_updates', methods=['POST'])
def check_updates():
    try:
        for folder_name, folder_id in FOLDER_IDS.items():
            delete_old_data(folder_name)
            success, msg = download_google_drive_files(folder_id, folder_name)
            if success:
                success, msg = process_local_folder(folder_name)
        return jsonify({"message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."}), 200
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}"}), 500


# ===================== –í–û–ü–†–û–°-–û–¢–í–ï–¢ =====================
@app.route('/api/submit_question', methods=['POST'])
def submit_question():
    data = request.get_json()
    folder_name = data.get("folder")
    question = data.get("question")

    if not question:
        return jsonify({"error": "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å"}), 400

    cache = folder_caches.get(folder_name)
    if not cache or not cache["doc_cache"]:
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞"}), 400

    context = cache["doc_cache"]
    max_chars = MAX_TOKENS * 4  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    chunk_size = max_chars
    num_chunks = (len(context) // chunk_size) + 1
    headers = {"Authorization": f"Bearer {XAI_API_KEY}", "Content-Type": "application/json"}

    summary = ""
    print(f"üîç –ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç {len(context)} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ {num_chunks} —á–∞—Å—Ç–µ–π")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —á–∞–Ω–∫–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    for i in range(num_chunks):
        start = i * chunk_size
        end = start + chunk_size
        chunk = context[start:end]

        print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç—å {i + 1}/{num_chunks} ({len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤)")

        prompt = (
            f"–ò—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n\n{chunk}\n\n"
            f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—Ä–∞—Ç—å—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –≤ –∫—ç—à–µ"
        )

        try:
            resp = requests.post(API_URL, headers=headers, json={
                "model": MODEL,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": OUTPUT_TOKENS
            })
            resp.raise_for_status()
            part_answer = resp.json()["choices"][0]["message"]["content"]
            summary += f"\n\n=== –ß–∞—Å—Ç—å {i + 1}/{num_chunks} ===\n{part_answer}"
        except Exception as e:
            summary += f"\n\n=== –ß–∞—Å—Ç—å {i + 1}/{num_chunks} ===\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}"

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π)
    print("üß† –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
    try:
        final_prompt = (
            f"–ò—Å–ø–æ–ª—å–∑—É—è –æ—Ç–≤–µ—Ç—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å—Ç–µ–π –Ω–∏–∂–µ, —Å–æ—Å—Ç–∞–≤—å –æ–¥–∏–Ω –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç "
            f"–Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, "
            f"–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n{summary}"
        )
        final_resp = requests.post(API_URL, headers=headers, json={
            "model": MODEL,
            "messages": [{"role": "user", "content": final_prompt}],
            "max_tokens": OUTPUT_TOKENS
        })
        final_resp.raise_for_status()
        final_answer = final_resp.json()["choices"][0]["message"]["content"]
    except Exception as e:
        final_answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}\n\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n{summary}"

    return jsonify({"answer": final_answer}), 200


# ===================== –ò–ù–¢–ï–†–§–ï–ô–° =====================
@app.route('/')
def serve_index():
    return send_from_directory('.', 'index.html')


@app.route('/favicon.ico')
def favicon():
    return '', 204


# ===================== –°–ï–†–í–ï–†–ù–´–ô –ó–ê–ü–£–°–ö =====================
if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=5000, debug=False)
